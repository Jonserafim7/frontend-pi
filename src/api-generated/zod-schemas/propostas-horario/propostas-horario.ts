/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  z as zod
} from 'zod';


/**
 * @summary Criar uma nova proposta de hor√°rio
 */
export const propostasHorarioControllerCreateBody = zod.object({
  "idCurso": zod.string().describe('ID do curso para o qual a proposta ser√° criada'),
  "idPeriodoLetivo": zod.string().describe('ID do per√≠odo letivo para o qual a proposta ser√° criada'),
  "observacoesCoordenador": zod.string().optional().describe('Observa√ß√µes do coordenador sobre a proposta')
})

/**
 * @summary Listar todas as propostas de hor√°rio
 */
export const propostasHorarioControllerFindAllResponseItem = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})
export const propostasHorarioControllerFindAllResponse = zod.array(propostasHorarioControllerFindAllResponseItem)

/**
 * @summary Buscar uma proposta de hor√°rio pelo ID
 */
export const propostasHorarioControllerFindOneParams = zod.object({
  "id": zod.string().uuid().describe('ID da proposta de hor√°rio')
})

export const propostasHorarioControllerFindOneResponse = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})

/**
 * @summary Atualizar uma proposta de hor√°rio
 */
export const propostasHorarioControllerUpdateParams = zod.object({
  "id": zod.string().uuid().describe('ID da proposta de hor√°rio')
})

export const propostasHorarioControllerUpdateBody = zod.object({
  "idCurso": zod.string().optional().describe('ID do curso para o qual a proposta ser√° criada'),
  "idPeriodoLetivo": zod.string().optional().describe('ID do per√≠odo letivo para o qual a proposta ser√° criada'),
  "observacoesCoordenador": zod.string().optional().describe('Observa√ß√µes do coordenador sobre a proposta')
})

export const propostasHorarioControllerUpdateResponse = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})

/**
 * @summary Remover uma proposta de hor√°rio
 */
export const propostasHorarioControllerRemoveParams = zod.object({
  "id": zod.string().uuid().describe('ID da proposta de hor√°rio')
})

export const propostasHorarioControllerRemoveResponse = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})

/**
 * @summary Submeter uma proposta de hor√°rio para aprova√ß√£o
 */
export const propostasHorarioControllerSubmitParams = zod.object({
  "id": zod.string().uuid().describe('ID da proposta de hor√°rio')
})

export const propostasHorarioControllerSubmitBody = zod.object({
  "observacoesCoordenador": zod.string().optional().describe('Observa√ß√µes finais do coordenador ao submeter a proposta')
})

export const propostasHorarioControllerSubmitResponse = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})

/**
 * @summary Aprovar uma proposta de hor√°rio
 */
export const propostasHorarioControllerApproveParams = zod.object({
  "id": zod.string().uuid().describe('ID da proposta de hor√°rio')
})

export const propostasHorarioControllerApproveBody = zod.object({
  "observacoesDiretor": zod.string().optional().describe('Observa√ß√µes do diretor ao aprovar a proposta')
})

export const propostasHorarioControllerApproveResponse = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})

/**
 * @summary Rejeitar uma proposta de hor√°rio
 */
export const propostasHorarioControllerRejectParams = zod.object({
  "id": zod.string().uuid().describe('ID da proposta de hor√°rio')
})

export const propostasHorarioControllerRejectBody = zod.object({
  "justificativaRejeicao": zod.string().describe('Justificativa obrigat√≥ria para a rejei√ß√£o da proposta'),
  "observacoesDiretor": zod.string().optional().describe('Observa√ß√µes adicionais do diretor')
})

export const propostasHorarioControllerRejectResponse = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})

/**
 * @summary Reabrir uma proposta rejeitada para edi√ß√£o
 */
export const propostasHorarioControllerReopenParams = zod.object({
  "id": zod.string().uuid().describe('ID da proposta de hor√°rio')
})

export const propostasHorarioControllerReopenResponse = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})

/**
 * @summary Devolver uma proposta aprovada para edi√ß√£o
 */
export const propostasHorarioControllerSendBackParams = zod.object({
  "id": zod.string().uuid().describe('ID da proposta de hor√°rio')
})

export const propostasHorarioControllerSendBackBody = zod.object({
  "motivoDevolucao": zod.string().describe('Motivo obrigat√≥rio para devolver a proposta para edi√ß√£o')
})

export const propostasHorarioControllerSendBackResponse = zod.object({
  "id": zod.string().describe('ID √∫nico da proposta'),
  "curso": zod.object({
  "id": zod.string().describe('ID do curso'),
  "nome": zod.string().describe('Nome do curso'),
  "codigo": zod.object({

}).optional().describe('C√≥digo do curso')
}).describe('Dados do curso'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per√≠odo letivo'),
  "ano": zod.number().describe('Ano do per√≠odo letivo'),
  "semestre": zod.number().describe('Semestre do per√≠odo letivo'),
  "dataInicio": zod.string().datetime({}).describe('Data de in√≠cio do per√≠odo letivo'),
  "dataFim": zod.string().datetime({}).describe('Data de fim do per√≠odo letivo')
}).describe('Dados do per√≠odo letivo'),
  "coordenadorQueSubmeteu": zod.object({
  "id": zod.string().describe('ID do coordenador'),
  "nome": zod.string().describe('Nome do coordenador'),
  "email": zod.string().describe('Email do coordenador')
}).describe('Dados do coordenador que submeteu'),
  "status": zod.enum(['DRAFT', 'PENDENTE_APROVACAO', 'APROVADA', 'REJEITADA']).describe('Status atual da proposta'),
  "dataSubmissao": zod.string().datetime({}).optional().describe('Data de submiss√£o da proposta'),
  "dataAprovacaoRejeicao": zod.string().datetime({}).optional().describe('Data de aprova√ß√£o ou rejei√ß√£o'),
  "justificativaRejeicao": zod.object({

}).optional().describe('Justificativa em caso de rejei√ß√£o'),
  "observacoesCoordenador": zod.object({

}).optional().describe('Observa√ß√µes do coordenador'),
  "observacoesDiretor": zod.object({

}).optional().describe('Observa√ß√µes do diretor'),
  "quantidadeAlocacoes": zod.number().describe('Quantidade de aloca√ß√µes na proposta'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o')
})

