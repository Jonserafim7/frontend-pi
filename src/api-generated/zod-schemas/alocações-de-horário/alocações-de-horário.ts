/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  z as zod
} from 'zod';


/**
 * Cria uma nova aloca√ß√£o de hor√°rio ap√≥s validar disponibilidade e conflitos
 * @summary Criar nova aloca√ß√£o de hor√°rio
 */
export const alocacoesHorariosControllerCreateBody = zod.object({
  "idTurma": zod.string().describe('ID da turma que ser√° alocada'),
  "idPropostaHorario": zod.string().optional().describe('ID da proposta de hor√°rio (opcional para aloca√ß√µes dentro de propostas)'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana para a aloca√ß√£o'),
  "horaInicio": zod.string().describe('Hora de in√≠cio da aula (formato HH:mm)'),
  "horaFim": zod.string().describe('Hora de fim da aula (formato HH:mm)')
})

/**
 * Busca aloca√ß√µes aplicando filtros opcionais
 * @summary Buscar aloca√ß√µes com filtros
 */
export const alocacoesHorariosControllerFindManyQueryParams = zod.object({
  "idTurma": zod.string().optional().describe('Filtrar por ID da turma'),
  "idProfessor": zod.string().optional().describe('Filtrar por ID do professor'),
  "idPeriodoLetivo": zod.string().optional().describe('Filtrar por per√≠odo letivo'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).optional().describe('Filtrar por dia da semana'),
  "idPropostaHorario": zod.string().optional().describe('Filtrar por ID da proposta de hor√°rio')
})

export const alocacoesHorariosControllerFindManyResponseItem = zod.object({
  "id": zod.string().describe('ID √∫nico da aloca√ß√£o'),
  "idTurma": zod.string().describe('ID da turma alocada'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana da aloca√ß√£o'),
  "horaInicio": zod.string().describe('Hora de in√≠cio da aula'),
  "horaFim": zod.string().describe('Hora de fim da aula'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o da aloca√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o'),
  "turma": zod.object({
  "id": zod.string().describe('ID da turma'),
  "codigoDaTurma": zod.string().describe('C√≥digo da turma'),
  "disciplinaOfertada": zod.object({
  "id": zod.string().describe('ID da disciplina ofertada'),
  "disciplina": zod.object({
  "id": zod.string().describe('ID da disciplina'),
  "nome": zod.string().describe('Nome da disciplina'),
  "codigo": zod.string().describe('C√≥digo da disciplina'),
  "cargaHoraria": zod.number().describe('Carga hor√°ria da disciplina')
}).describe('Dados da disciplina')
}).describe('Dados da disciplina ofertada'),
  "professorAlocado": zod.object({
  "id": zod.string().describe('ID do professor'),
  "nome": zod.string().describe('Nome do professor'),
  "email": zod.string().describe('Email do professor')
}).optional().describe('Professor alocado √† turma')
}).describe('Dados da turma alocada')
})
export const alocacoesHorariosControllerFindManyResponse = zod.array(alocacoesHorariosControllerFindManyResponseItem)

/**
 * Valida se uma aloca√ß√£o pode ser criada sem conflitos
 * @summary Validar aloca√ß√£o antes de criar
 */
export const alocacoesHorariosControllerValidateBody = zod.object({
  "idTurma": zod.string().describe('ID da turma que ser√° alocada'),
  "idPropostaHorario": zod.string().optional().describe('ID da proposta de hor√°rio (opcional para aloca√ß√µes dentro de propostas)'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana para a aloca√ß√£o'),
  "horaInicio": zod.string().describe('Hora de in√≠cio da aula (formato HH:mm)'),
  "horaFim": zod.string().describe('Hora de fim da aula (formato HH:mm)')
})

export const alocacoesHorariosControllerValidateResponse = zod.object({
  "valid": zod.boolean().describe('Indica se a aloca√ß√£o √© v√°lida'),
  "error": zod.string().optional().describe('Mensagem de erro caso a aloca√ß√£o seja inv√°lida'),
  "details": zod.object({

}).optional().describe('Detalhes adicionais sobre a valida√ß√£o')
})

/**
 * Busca todas as aloca√ß√µes de uma turma espec√≠fica
 * @summary Buscar aloca√ß√µes por turma
 */
export const alocacoesHorariosControllerFindByTurmaParams = zod.object({
  "idTurma": zod.string().describe('ID da turma')
})

export const alocacoesHorariosControllerFindByTurmaResponseItem = zod.object({
  "id": zod.string().describe('ID √∫nico da aloca√ß√£o'),
  "idTurma": zod.string().describe('ID da turma alocada'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana da aloca√ß√£o'),
  "horaInicio": zod.string().describe('Hora de in√≠cio da aula'),
  "horaFim": zod.string().describe('Hora de fim da aula'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o da aloca√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o'),
  "turma": zod.object({
  "id": zod.string().describe('ID da turma'),
  "codigoDaTurma": zod.string().describe('C√≥digo da turma'),
  "disciplinaOfertada": zod.object({
  "id": zod.string().describe('ID da disciplina ofertada'),
  "disciplina": zod.object({
  "id": zod.string().describe('ID da disciplina'),
  "nome": zod.string().describe('Nome da disciplina'),
  "codigo": zod.string().describe('C√≥digo da disciplina'),
  "cargaHoraria": zod.number().describe('Carga hor√°ria da disciplina')
}).describe('Dados da disciplina')
}).describe('Dados da disciplina ofertada'),
  "professorAlocado": zod.object({
  "id": zod.string().describe('ID do professor'),
  "nome": zod.string().describe('Nome do professor'),
  "email": zod.string().describe('Email do professor')
}).optional().describe('Professor alocado √† turma')
}).describe('Dados da turma alocada')
})
export const alocacoesHorariosControllerFindByTurmaResponse = zod.array(alocacoesHorariosControllerFindByTurmaResponseItem)

/**
 * Busca todas as aloca√ß√µes de um professor espec√≠fico
 * @summary Buscar aloca√ß√µes por professor
 */
export const alocacoesHorariosControllerFindByProfessorParams = zod.object({
  "idProfessor": zod.string().describe('ID do professor')
})

export const alocacoesHorariosControllerFindByProfessorResponseItem = zod.object({
  "id": zod.string().describe('ID √∫nico da aloca√ß√£o'),
  "idTurma": zod.string().describe('ID da turma alocada'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana da aloca√ß√£o'),
  "horaInicio": zod.string().describe('Hora de in√≠cio da aula'),
  "horaFim": zod.string().describe('Hora de fim da aula'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o da aloca√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o'),
  "turma": zod.object({
  "id": zod.string().describe('ID da turma'),
  "codigoDaTurma": zod.string().describe('C√≥digo da turma'),
  "disciplinaOfertada": zod.object({
  "id": zod.string().describe('ID da disciplina ofertada'),
  "disciplina": zod.object({
  "id": zod.string().describe('ID da disciplina'),
  "nome": zod.string().describe('Nome da disciplina'),
  "codigo": zod.string().describe('C√≥digo da disciplina'),
  "cargaHoraria": zod.number().describe('Carga hor√°ria da disciplina')
}).describe('Dados da disciplina')
}).describe('Dados da disciplina ofertada'),
  "professorAlocado": zod.object({
  "id": zod.string().describe('ID do professor'),
  "nome": zod.string().describe('Nome do professor'),
  "email": zod.string().describe('Email do professor')
}).optional().describe('Professor alocado √† turma')
}).describe('Dados da turma alocada')
})
export const alocacoesHorariosControllerFindByProfessorResponse = zod.array(alocacoesHorariosControllerFindByProfessorResponseItem)

/**
 * Busca todas as aloca√ß√µes de uma proposta de hor√°rio espec√≠fica
 * @summary Buscar aloca√ß√µes por proposta
 */
export const alocacoesHorariosControllerFindByPropostaParams = zod.object({
  "idPropostaHorario": zod.string().describe('ID da proposta de hor√°rio')
})

export const alocacoesHorariosControllerFindByPropostaResponseItem = zod.object({
  "id": zod.string().describe('ID √∫nico da aloca√ß√£o'),
  "idTurma": zod.string().describe('ID da turma alocada'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana da aloca√ß√£o'),
  "horaInicio": zod.string().describe('Hora de in√≠cio da aula'),
  "horaFim": zod.string().describe('Hora de fim da aula'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria√ß√£o da aloca√ß√£o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da √∫ltima atualiza√ß√£o'),
  "turma": zod.object({
  "id": zod.string().describe('ID da turma'),
  "codigoDaTurma": zod.string().describe('C√≥digo da turma'),
  "disciplinaOfertada": zod.object({
  "id": zod.string().describe('ID da disciplina ofertada'),
  "disciplina": zod.object({
  "id": zod.string().describe('ID da disciplina'),
  "nome": zod.string().describe('Nome da disciplina'),
  "codigo": zod.string().describe('C√≥digo da disciplina'),
  "cargaHoraria": zod.number().describe('Carga hor√°ria da disciplina')
}).describe('Dados da disciplina')
}).describe('Dados da disciplina ofertada'),
  "professorAlocado": zod.object({
  "id": zod.string().describe('ID do professor'),
  "nome": zod.string().describe('Nome do professor'),
  "email": zod.string().describe('Email do professor')
}).optional().describe('Professor alocado √† turma')
}).describe('Dados da turma alocada')
})
export const alocacoesHorariosControllerFindByPropostaResponse = zod.array(alocacoesHorariosControllerFindByPropostaResponseItem)

/**
 * Remove uma aloca√ß√£o de hor√°rio existente
 * @summary Remover aloca√ß√£o
 */
export const alocacoesHorariosControllerDeleteParams = zod.object({
  "id": zod.string().describe('ID da aloca√ß√£o')
})

