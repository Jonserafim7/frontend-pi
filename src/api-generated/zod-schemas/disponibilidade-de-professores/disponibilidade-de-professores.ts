/**
 * Generated by orval v7.9.0 游꽄
 * Do not edit manually.
 * API Hor치rios Acad칡micos
 * Documenta칞칚o da API para o Sistema de Elabora칞칚o de Hor치rio e Atribui칞칚o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  z as zod
} from 'zod';


/**
 * Cria uma nova disponibilidade para um professor. Apenas o pr칩prio professor, admin ou diretor podem criar.
 * @summary Criar nova disponibilidade
 */
export const disponibilidadeProfessorControllerCreateBodyHoraInicioRegExp = new RegExp('^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$');
export const disponibilidadeProfessorControllerCreateBodyHoraFimRegExp = new RegExp('^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$');
export const disponibilidadeProfessorControllerCreateBodyStatusDefault = "DISPONIVEL";

export const disponibilidadeProfessorControllerCreateBody = zod.object({
  "idUsuarioProfessor": zod.string().describe('ID do usu치rio professor'),
  "idPeriodoLetivo": zod.string().describe('ID do per칤odo letivo'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana'),
  "horaInicio": zod.string().regex(disponibilidadeProfessorControllerCreateBodyHoraInicioRegExp).describe('Hor치rio de in칤cio (formato HH:mm)'),
  "horaFim": zod.string().regex(disponibilidadeProfessorControllerCreateBodyHoraFimRegExp).describe('Hor치rio de fim (formato HH:mm)'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).describe('Status da disponibilidade')
})

/**
 * Lista disponibilidades com filtros opcionais e pagina칞칚o. Professores veem apenas suas pr칩prias.
 * @summary Listar disponibilidades
 */
export const disponibilidadeProfessorControllerFindAllQueryLimitMax = 100;


export const disponibilidadeProfessorControllerFindAllQueryParams = zod.object({
  "professorId": zod.string().optional().describe('Filtrar por ID do professor'),
  "periodoLetivoId": zod.string().optional().describe('Filtrar por ID do per칤odo letivo'),
  "diaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).optional().describe('Filtrar por dia da semana'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).optional().describe('Filtrar por status'),
  "orderBy": zod.enum(['diaDaSemana', 'horaInicio', 'horaFim', 'dataCriacao']).optional().describe('Campo para ordena칞칚o'),
  "orderDirection": zod.enum(['asc', 'desc']).optional().describe('Dire칞칚o da ordena칞칚o'),
  "page": zod.number().min(1).optional().describe('P치gina (padr칚o: 1)'),
  "limit": zod.number().min(1).max(disponibilidadeProfessorControllerFindAllQueryLimitMax).optional().describe('Itens por p치gina (padr칚o: 10)')
})

export const disponibilidadeProfessorControllerFindAllResponse = zod.object({
  "data": zod.array(zod.object({
  "id": zod.string().describe('ID 칰nico da disponibilidade'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana'),
  "horaInicio": zod.string().describe('Hor치rio de in칤cio (formato HH:mm)'),
  "horaFim": zod.string().describe('Hor치rio de fim (formato HH:mm)'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).describe('Status da disponibilidade'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria칞칚o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da 칰ltima atualiza칞칚o'),
  "usuarioProfessor": zod.object({
  "id": zod.string().describe('ID do professor'),
  "nome": zod.string().describe('Nome do professor'),
  "email": zod.string().describe('Email do professor')
}).describe('Dados do professor'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per칤odo letivo'),
  "ano": zod.number().describe('Ano do per칤odo'),
  "semestre": zod.number().describe('Semestre do per칤odo'),
  "status": zod.string().describe('Status do per칤odo letivo')
}).describe('Dados do per칤odo letivo')
})).optional(),
  "total": zod.number().optional(),
  "page": zod.number().optional(),
  "limit": zod.number().optional(),
  "totalPages": zod.number().optional()
})

/**
 * Busca uma disponibilidade espec칤fica pelo ID
 * @summary Buscar disponibilidade por ID
 */
export const disponibilidadeProfessorControllerFindOneParams = zod.object({
  "id": zod.string().describe('ID da disponibilidade')
})

export const disponibilidadeProfessorControllerFindOneResponse = zod.object({
  "id": zod.string().describe('ID 칰nico da disponibilidade'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana'),
  "horaInicio": zod.string().describe('Hor치rio de in칤cio (formato HH:mm)'),
  "horaFim": zod.string().describe('Hor치rio de fim (formato HH:mm)'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).describe('Status da disponibilidade'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria칞칚o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da 칰ltima atualiza칞칚o'),
  "usuarioProfessor": zod.object({
  "id": zod.string().describe('ID do professor'),
  "nome": zod.string().describe('Nome do professor'),
  "email": zod.string().describe('Email do professor')
}).describe('Dados do professor'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per칤odo letivo'),
  "ano": zod.number().describe('Ano do per칤odo'),
  "semestre": zod.number().describe('Semestre do per칤odo'),
  "status": zod.string().describe('Status do per칤odo letivo')
}).describe('Dados do per칤odo letivo')
})

/**
 * Atualiza uma disponibilidade existente. Apenas o pr칩prio professor, admin ou diretor podem atualizar.
 * @summary Atualizar disponibilidade
 */
export const disponibilidadeProfessorControllerUpdateParams = zod.object({
  "id": zod.string().describe('ID da disponibilidade')
})

export const disponibilidadeProfessorControllerUpdateBodyHoraInicioRegExp = new RegExp('^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$');
export const disponibilidadeProfessorControllerUpdateBodyHoraFimRegExp = new RegExp('^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$');
export const disponibilidadeProfessorControllerUpdateBodyStatusDefault = "DISPONIVEL";

export const disponibilidadeProfessorControllerUpdateBody = zod.object({
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).optional().describe('Dia da semana'),
  "horaInicio": zod.string().regex(disponibilidadeProfessorControllerUpdateBodyHoraInicioRegExp).optional().describe('Hor치rio de in칤cio (formato HH:mm)'),
  "horaFim": zod.string().regex(disponibilidadeProfessorControllerUpdateBodyHoraFimRegExp).optional().describe('Hor치rio de fim (formato HH:mm)'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).default(disponibilidadeProfessorControllerUpdateBodyStatusDefault).describe('Status da disponibilidade')
})

export const disponibilidadeProfessorControllerUpdateResponse = zod.object({
  "id": zod.string().describe('ID 칰nico da disponibilidade'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana'),
  "horaInicio": zod.string().describe('Hor치rio de in칤cio (formato HH:mm)'),
  "horaFim": zod.string().describe('Hor치rio de fim (formato HH:mm)'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).describe('Status da disponibilidade'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria칞칚o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da 칰ltima atualiza칞칚o'),
  "usuarioProfessor": zod.object({
  "id": zod.string().describe('ID do professor'),
  "nome": zod.string().describe('Nome do professor'),
  "email": zod.string().describe('Email do professor')
}).describe('Dados do professor'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per칤odo letivo'),
  "ano": zod.number().describe('Ano do per칤odo'),
  "semestre": zod.number().describe('Semestre do per칤odo'),
  "status": zod.string().describe('Status do per칤odo letivo')
}).describe('Dados do per칤odo letivo')
})

/**
 * Remove uma disponibilidade existente. Apenas o pr칩prio professor, admin ou diretor podem remover.
 * @summary Remover disponibilidade
 */
export const disponibilidadeProfessorControllerRemoveParams = zod.object({
  "id": zod.string().describe('ID da disponibilidade')
})

/**
 * Lista todas as disponibilidades de um professor espec칤fico
 * @summary Listar disponibilidades por professor
 */
export const disponibilidadeProfessorControllerFindByProfessorParams = zod.object({
  "professorId": zod.string().describe('ID do professor')
})

export const disponibilidadeProfessorControllerFindByProfessorQueryLimitMax = 100;


export const disponibilidadeProfessorControllerFindByProfessorQueryParams = zod.object({
  "periodoLetivoId": zod.string().optional().describe('ID do per칤odo letivo para filtrar'),
  "diaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).optional().describe('Dia da semana para filtrar'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).optional().describe('Status da disponibilidade para filtrar'),
  "orderBy": zod.enum(['diaDaSemana', 'horaInicio', 'horaFim', 'dataCriacao']).optional().describe('Campo para ordena칞칚o'),
  "orderDirection": zod.enum(['asc', 'desc']).optional().describe('Dire칞칚o da ordena칞칚o'),
  "page": zod.number().min(1).optional().describe('P치gina para pagina칞칚o (come칞a em 1)'),
  "limit": zod.number().min(1).max(disponibilidadeProfessorControllerFindByProfessorQueryLimitMax).optional().describe('Quantidade de itens por p치gina')
})

/**
 * Lista todas as disponibilidades de um per칤odo letivo espec칤fico
 * @summary Listar disponibilidades por per칤odo
 */
export const disponibilidadeProfessorControllerFindByPeriodoParams = zod.object({
  "periodoId": zod.string().describe('ID do per칤odo letivo')
})

export const disponibilidadeProfessorControllerFindByPeriodoQueryLimitMax = 100;


export const disponibilidadeProfessorControllerFindByPeriodoQueryParams = zod.object({
  "professorId": zod.string().optional().describe('ID do professor para filtrar'),
  "periodoLetivoId": zod.string().optional().describe('ID do per칤odo letivo para filtrar'),
  "diaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).optional().describe('Dia da semana para filtrar'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).optional().describe('Status da disponibilidade para filtrar'),
  "orderBy": zod.enum(['diaDaSemana', 'horaInicio', 'horaFim', 'dataCriacao']).optional().describe('Campo para ordena칞칚o'),
  "orderDirection": zod.enum(['asc', 'desc']).optional().describe('Dire칞칚o da ordena칞칚o'),
  "page": zod.number().min(1).optional().describe('P치gina para pagina칞칚o (come칞a em 1)'),
  "limit": zod.number().min(1).max(disponibilidadeProfessorControllerFindByPeriodoQueryLimitMax).optional().describe('Quantidade de itens por p치gina')
})

/**
 * Lista disponibilidades de um professor em um per칤odo letivo espec칤fico
 * @summary Listar disponibilidades por professor e per칤odo
 */
export const disponibilidadeProfessorControllerFindByProfessorAndPeriodoParams = zod.object({
  "professorId": zod.string().describe('ID do professor'),
  "periodoId": zod.string().describe('ID do per칤odo letivo')
})

export const disponibilidadeProfessorControllerFindByProfessorAndPeriodoResponseItem = zod.object({
  "id": zod.string().describe('ID 칰nico da disponibilidade'),
  "diaDaSemana": zod.enum(['SEGUNDA', 'TERCA', 'QUARTA', 'QUINTA', 'SEXTA', 'SABADO']).describe('Dia da semana'),
  "horaInicio": zod.string().describe('Hor치rio de in칤cio (formato HH:mm)'),
  "horaFim": zod.string().describe('Hor치rio de fim (formato HH:mm)'),
  "status": zod.enum(['DISPONIVEL', 'INDISPONIVEL']).describe('Status da disponibilidade'),
  "dataCriacao": zod.string().datetime({}).describe('Data de cria칞칚o'),
  "dataAtualizacao": zod.string().datetime({}).describe('Data da 칰ltima atualiza칞칚o'),
  "usuarioProfessor": zod.object({
  "id": zod.string().describe('ID do professor'),
  "nome": zod.string().describe('Nome do professor'),
  "email": zod.string().describe('Email do professor')
}).describe('Dados do professor'),
  "periodoLetivo": zod.object({
  "id": zod.string().describe('ID do per칤odo letivo'),
  "ano": zod.number().describe('Ano do per칤odo'),
  "semestre": zod.number().describe('Semestre do per칤odo'),
  "status": zod.string().describe('Status do per칤odo letivo')
}).describe('Dados do per칤odo letivo')
})
export const disponibilidadeProfessorControllerFindByProfessorAndPeriodoResponse = zod.array(disponibilidadeProfessorControllerFindByProfessorAndPeriodoResponseItem)

