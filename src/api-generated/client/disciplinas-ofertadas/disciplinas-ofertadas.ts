/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateDisciplinaOfertadaDto,
  DisciplinaOfertadaResponseDto,
  DisciplinasOfertadasControllerFindAllParams,
  UpdateDisciplinaOfertadaDto
} from '../../model';

import { orvalCustomInstance } from '../../../lib/orval-axios-instance';
import type { ErrorType , BodyType } from '../../../lib/orval-axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Criar uma nova oferta de disciplina (Coordenador)
 */
export const disciplinasOfertadasControllerCreate = (
    createDisciplinaOfertadaDto: BodyType<CreateDisciplinaOfertadaDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<DisciplinaOfertadaResponseDto>(
      {url: `/disciplinas-ofertadas`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDisciplinaOfertadaDto, signal
    },
      options);
    }
  


export const getDisciplinasOfertadasControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerCreate>>, TError,{data: BodyType<CreateDisciplinaOfertadaDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerCreate>>, TError,{data: BodyType<CreateDisciplinaOfertadaDto>}, TContext> => {

const mutationKey = ['disciplinasOfertadasControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disciplinasOfertadasControllerCreate>>, {data: BodyType<CreateDisciplinaOfertadaDto>}> = (props) => {
          const {data} = props ?? {};

          return  disciplinasOfertadasControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DisciplinasOfertadasControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof disciplinasOfertadasControllerCreate>>>
    export type DisciplinasOfertadasControllerCreateMutationBody = BodyType<CreateDisciplinaOfertadaDto>
    export type DisciplinasOfertadasControllerCreateMutationError = ErrorType<void>

    /**
 * @summary Criar uma nova oferta de disciplina (Coordenador)
 */
export const useDisciplinasOfertadasControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerCreate>>, TError,{data: BodyType<CreateDisciplinaOfertadaDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof disciplinasOfertadasControllerCreate>>,
        TError,
        {data: BodyType<CreateDisciplinaOfertadaDto>},
        TContext
      > => {

      const mutationOptions = getDisciplinasOfertadasControllerCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Listar disciplinas ofertadas (Coordenador, Diretor)
 */
export const disciplinasOfertadasControllerFindAll = (
    params?: DisciplinasOfertadasControllerFindAllParams,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<DisciplinaOfertadaResponseDto[]>(
      {url: `/disciplinas-ofertadas`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getDisciplinasOfertadasControllerFindAllQueryKey = (params?: DisciplinasOfertadasControllerFindAllParams,) => {
    return ['disciplinas-ofertadas', ...(params ? [params]: [])] as const;
    }

    
export const getDisciplinasOfertadasControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof disciplinasOfertadasControllerFindAll>>, TError = ErrorType<void>>(params?: DisciplinasOfertadasControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDisciplinasOfertadasControllerFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindAll>>> = ({ signal }) => disciplinasOfertadasControllerFindAll(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type DisciplinasOfertadasControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindAll>>>
export type DisciplinasOfertadasControllerFindAllQueryError = ErrorType<void>


/**
 * @summary Listar disciplinas ofertadas (Coordenador, Diretor)
 */

export function useDisciplinasOfertadasControllerFindAll<TData = Awaited<ReturnType<typeof disciplinasOfertadasControllerFindAll>>, TError = ErrorType<void>>(
 params?: DisciplinasOfertadasControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getDisciplinasOfertadasControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Obter detalhes de uma oferta de disciplina espec√≠fica (Coordenador, Diretor)
 */
export const disciplinasOfertadasControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<DisciplinaOfertadaResponseDto>(
      {url: `/disciplinas-ofertadas/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getDisciplinasOfertadasControllerFindOneQueryKey = (id: string,) => {
    return ['disciplinas-ofertadas',id] as const;
    }

    
export const getDisciplinasOfertadasControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof disciplinasOfertadasControllerFindOne>>, TError = ErrorType<void>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDisciplinasOfertadasControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindOne>>> = ({ signal }) => disciplinasOfertadasControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type DisciplinasOfertadasControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindOne>>>
export type DisciplinasOfertadasControllerFindOneQueryError = ErrorType<void>


/**
 * @summary Obter detalhes de uma oferta de disciplina espec√≠fica (Coordenador, Diretor)
 */

export function useDisciplinasOfertadasControllerFindOne<TData = Awaited<ReturnType<typeof disciplinasOfertadasControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getDisciplinasOfertadasControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Atualizar dados de uma oferta de disciplina (Coordenador)
 */
export const disciplinasOfertadasControllerUpdate = (
    id: string,
    updateDisciplinaOfertadaDto: BodyType<UpdateDisciplinaOfertadaDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<DisciplinaOfertadaResponseDto>(
      {url: `/disciplinas-ofertadas/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateDisciplinaOfertadaDto
    },
      options);
    }
  


export const getDisciplinasOfertadasControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerUpdate>>, TError,{id: string;data: BodyType<UpdateDisciplinaOfertadaDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerUpdate>>, TError,{id: string;data: BodyType<UpdateDisciplinaOfertadaDto>}, TContext> => {

const mutationKey = ['disciplinasOfertadasControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disciplinasOfertadasControllerUpdate>>, {id: string;data: BodyType<UpdateDisciplinaOfertadaDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  disciplinasOfertadasControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DisciplinasOfertadasControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof disciplinasOfertadasControllerUpdate>>>
    export type DisciplinasOfertadasControllerUpdateMutationBody = BodyType<UpdateDisciplinaOfertadaDto>
    export type DisciplinasOfertadasControllerUpdateMutationError = ErrorType<void>

    /**
 * @summary Atualizar dados de uma oferta de disciplina (Coordenador)
 */
export const useDisciplinasOfertadasControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerUpdate>>, TError,{id: string;data: BodyType<UpdateDisciplinaOfertadaDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof disciplinasOfertadasControllerUpdate>>,
        TError,
        {id: string;data: BodyType<UpdateDisciplinaOfertadaDto>},
        TContext
      > => {

      const mutationOptions = getDisciplinasOfertadasControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Cancelar uma oferta de disciplina (Coordenador)
 */
export const disciplinasOfertadasControllerRemove = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<void>(
      {url: `/disciplinas-ofertadas/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDisciplinasOfertadasControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['disciplinasOfertadasControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disciplinasOfertadasControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  disciplinasOfertadasControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DisciplinasOfertadasControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof disciplinasOfertadasControllerRemove>>>
    
    export type DisciplinasOfertadasControllerRemoveMutationError = ErrorType<void>

    /**
 * @summary Cancelar uma oferta de disciplina (Coordenador)
 */
export const useDisciplinasOfertadasControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasOfertadasControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof disciplinasOfertadasControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDisciplinasOfertadasControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    