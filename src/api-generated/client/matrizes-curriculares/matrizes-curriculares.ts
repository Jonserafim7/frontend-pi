/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateMatrizCurricularDto,
  MatrizCurricularResponseDto,
  MatrizesCurricularesControllerFindAllParams,
  UpdateMatrizCurricularDto
} from '../../model';

import { orvalCustomInstance } from '../../../lib/orval-axios-instance';
import type { ErrorType , BodyType } from '../../../lib/orval-axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Criar nova matriz curricular
 */
export const matrizesCurricularesControllerCreate = (
    createMatrizCurricularDto: BodyType<CreateMatrizCurricularDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<MatrizCurricularResponseDto>(
      {url: `/matrizes-curriculares`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createMatrizCurricularDto, signal
    },
      options);
    }
  


export const getMatrizesCurricularesControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerCreate>>, TError,{data: BodyType<CreateMatrizCurricularDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerCreate>>, TError,{data: BodyType<CreateMatrizCurricularDto>}, TContext> => {

const mutationKey = ['matrizesCurricularesControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof matrizesCurricularesControllerCreate>>, {data: BodyType<CreateMatrizCurricularDto>}> = (props) => {
          const {data} = props ?? {};

          return  matrizesCurricularesControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MatrizesCurricularesControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof matrizesCurricularesControllerCreate>>>
    export type MatrizesCurricularesControllerCreateMutationBody = BodyType<CreateMatrizCurricularDto>
    export type MatrizesCurricularesControllerCreateMutationError = ErrorType<void>

    /**
 * @summary Criar nova matriz curricular
 */
export const useMatrizesCurricularesControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerCreate>>, TError,{data: BodyType<CreateMatrizCurricularDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof matrizesCurricularesControllerCreate>>,
        TError,
        {data: BodyType<CreateMatrizCurricularDto>},
        TContext
      > => {

      const mutationOptions = getMatrizesCurricularesControllerCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Listar todas as matrizes curriculares
 */
export const matrizesCurricularesControllerFindAll = (
    params?: MatrizesCurricularesControllerFindAllParams,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<MatrizCurricularResponseDto[]>(
      {url: `/matrizes-curriculares`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getMatrizesCurricularesControllerFindAllQueryKey = (params?: MatrizesCurricularesControllerFindAllParams,) => {
    return ['matrizes-curriculares', ...(params ? [params]: [])] as const;
    }

    
export const getMatrizesCurricularesControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof matrizesCurricularesControllerFindAll>>, TError = ErrorType<void>>(params?: MatrizesCurricularesControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMatrizesCurricularesControllerFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof matrizesCurricularesControllerFindAll>>> = ({ signal }) => matrizesCurricularesControllerFindAll(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type MatrizesCurricularesControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof matrizesCurricularesControllerFindAll>>>
export type MatrizesCurricularesControllerFindAllQueryError = ErrorType<void>


/**
 * @summary Listar todas as matrizes curriculares
 */

export function useMatrizesCurricularesControllerFindAll<TData = Awaited<ReturnType<typeof matrizesCurricularesControllerFindAll>>, TError = ErrorType<void>>(
 params?: MatrizesCurricularesControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getMatrizesCurricularesControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Buscar matriz curricular por ID
 */
export const matrizesCurricularesControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<MatrizCurricularResponseDto>(
      {url: `/matrizes-curriculares/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getMatrizesCurricularesControllerFindOneQueryKey = (id: string,) => {
    return ['matrizes-curriculares',id] as const;
    }

    
export const getMatrizesCurricularesControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof matrizesCurricularesControllerFindOne>>, TError = ErrorType<void>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getMatrizesCurricularesControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof matrizesCurricularesControllerFindOne>>> = ({ signal }) => matrizesCurricularesControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type MatrizesCurricularesControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof matrizesCurricularesControllerFindOne>>>
export type MatrizesCurricularesControllerFindOneQueryError = ErrorType<void>


/**
 * @summary Buscar matriz curricular por ID
 */

export function useMatrizesCurricularesControllerFindOne<TData = Awaited<ReturnType<typeof matrizesCurricularesControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getMatrizesCurricularesControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Atualizar matriz curricular
 */
export const matrizesCurricularesControllerUpdate = (
    id: string,
    updateMatrizCurricularDto: BodyType<UpdateMatrizCurricularDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<MatrizCurricularResponseDto>(
      {url: `/matrizes-curriculares/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateMatrizCurricularDto
    },
      options);
    }
  


export const getMatrizesCurricularesControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerUpdate>>, TError,{id: string;data: BodyType<UpdateMatrizCurricularDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerUpdate>>, TError,{id: string;data: BodyType<UpdateMatrizCurricularDto>}, TContext> => {

const mutationKey = ['matrizesCurricularesControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof matrizesCurricularesControllerUpdate>>, {id: string;data: BodyType<UpdateMatrizCurricularDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  matrizesCurricularesControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MatrizesCurricularesControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof matrizesCurricularesControllerUpdate>>>
    export type MatrizesCurricularesControllerUpdateMutationBody = BodyType<UpdateMatrizCurricularDto>
    export type MatrizesCurricularesControllerUpdateMutationError = ErrorType<void>

    /**
 * @summary Atualizar matriz curricular
 */
export const useMatrizesCurricularesControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerUpdate>>, TError,{id: string;data: BodyType<UpdateMatrizCurricularDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof matrizesCurricularesControllerUpdate>>,
        TError,
        {id: string;data: BodyType<UpdateMatrizCurricularDto>},
        TContext
      > => {

      const mutationOptions = getMatrizesCurricularesControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Remover matriz curricular
 */
export const matrizesCurricularesControllerRemove = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<void>(
      {url: `/matrizes-curriculares/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getMatrizesCurricularesControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['matrizesCurricularesControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof matrizesCurricularesControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  matrizesCurricularesControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type MatrizesCurricularesControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof matrizesCurricularesControllerRemove>>>
    
    export type MatrizesCurricularesControllerRemoveMutationError = ErrorType<void>

    /**
 * @summary Remover matriz curricular
 */
export const useMatrizesCurricularesControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof matrizesCurricularesControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof matrizesCurricularesControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getMatrizesCurricularesControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    