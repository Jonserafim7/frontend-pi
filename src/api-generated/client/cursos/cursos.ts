/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateCursoDto,
  CursoResponseDto,
  UpdateCursoDto
} from '../../model';

import { orvalCustomInstance } from '../../../lib/orval-axios-instance';
import type { ErrorType , BodyType } from '../../../lib/orval-axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Criar um novo curso
 */
export const cursosControllerCreate = (
    createCursoDto: BodyType<CreateCursoDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<CursoResponseDto>(
      {url: `/cursos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createCursoDto, signal
    },
      options);
    }
  


export const getCursosControllerCreateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cursosControllerCreate>>, TError,{data: BodyType<CreateCursoDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cursosControllerCreate>>, TError,{data: BodyType<CreateCursoDto>}, TContext> => {

const mutationKey = ['cursosControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cursosControllerCreate>>, {data: BodyType<CreateCursoDto>}> = (props) => {
          const {data} = props ?? {};

          return  cursosControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CursosControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof cursosControllerCreate>>>
    export type CursosControllerCreateMutationBody = BodyType<CreateCursoDto>
    export type CursosControllerCreateMutationError = ErrorType<unknown>

    /**
 * @summary Criar um novo curso
 */
export const useCursosControllerCreate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cursosControllerCreate>>, TError,{data: BodyType<CreateCursoDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof cursosControllerCreate>>,
        TError,
        {data: BodyType<CreateCursoDto>},
        TContext
      > => {

      const mutationOptions = getCursosControllerCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Listar todos os cursos
 */
export const cursosControllerFindAll = (
    
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<CursoResponseDto[]>(
      {url: `/cursos`, method: 'GET', signal
    },
      options);
    }
  

export const getCursosControllerFindAllQueryKey = () => {
    return ['cursos'] as const;
    }

    
export const getCursosControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof cursosControllerFindAll>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof cursosControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCursosControllerFindAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof cursosControllerFindAll>>> = ({ signal }) => cursosControllerFindAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof cursosControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type CursosControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof cursosControllerFindAll>>>
export type CursosControllerFindAllQueryError = ErrorType<unknown>


/**
 * @summary Listar todos os cursos
 */

export function useCursosControllerFindAll<TData = Awaited<ReturnType<typeof cursosControllerFindAll>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof cursosControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getCursosControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Buscar um curso pelo ID
 */
export const cursosControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<CursoResponseDto>(
      {url: `/cursos/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getCursosControllerFindOneQueryKey = (id: string,) => {
    return ['cursos',id] as const;
    }

    
export const getCursosControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof cursosControllerFindOne>>, TError = ErrorType<unknown>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof cursosControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getCursosControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof cursosControllerFindOne>>> = ({ signal }) => cursosControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof cursosControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type CursosControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof cursosControllerFindOne>>>
export type CursosControllerFindOneQueryError = ErrorType<unknown>


/**
 * @summary Buscar um curso pelo ID
 */

export function useCursosControllerFindOne<TData = Awaited<ReturnType<typeof cursosControllerFindOne>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof cursosControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getCursosControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Atualizar um curso
 */
export const cursosControllerUpdate = (
    id: string,
    updateCursoDto: BodyType<UpdateCursoDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<CursoResponseDto>(
      {url: `/cursos/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateCursoDto
    },
      options);
    }
  


export const getCursosControllerUpdateMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cursosControllerUpdate>>, TError,{id: string;data: BodyType<UpdateCursoDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cursosControllerUpdate>>, TError,{id: string;data: BodyType<UpdateCursoDto>}, TContext> => {

const mutationKey = ['cursosControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cursosControllerUpdate>>, {id: string;data: BodyType<UpdateCursoDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  cursosControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CursosControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof cursosControllerUpdate>>>
    export type CursosControllerUpdateMutationBody = BodyType<UpdateCursoDto>
    export type CursosControllerUpdateMutationError = ErrorType<unknown>

    /**
 * @summary Atualizar um curso
 */
export const useCursosControllerUpdate = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cursosControllerUpdate>>, TError,{id: string;data: BodyType<UpdateCursoDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof cursosControllerUpdate>>,
        TError,
        {id: string;data: BodyType<UpdateCursoDto>},
        TContext
      > => {

      const mutationOptions = getCursosControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Remover um curso
 */
export const cursosControllerRemove = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<CursoResponseDto>(
      {url: `/cursos/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getCursosControllerRemoveMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cursosControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof cursosControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['cursosControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof cursosControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  cursosControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type CursosControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof cursosControllerRemove>>>
    
    export type CursosControllerRemoveMutationError = ErrorType<unknown>

    /**
 * @summary Remover um curso
 */
export const useCursosControllerRemove = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof cursosControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof cursosControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getCursosControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    