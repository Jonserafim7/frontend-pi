/**
 * Generated by orval v7.9.0 游꽄
 * Do not edit manually.
 * API Hor치rios Acad칡micos
 * Documenta칞칚o da API para o Sistema de Elabora칞칚o de Hor치rio e Atribui칞칚o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  ApprovePropostaDto,
  CreatePropostaHorarioDto,
  PropostaHorarioResponseDto,
  RejectPropostaDto,
  SendBackPropostaDto,
  SubmitPropostaHorarioDto,
  UpdatePropostaHorarioDto,
} from "../../model"

import { orvalCustomInstance } from "../../../lib/orval-axios-instance"
import type { ErrorType, BodyType } from "../../../lib/orval-axios-instance"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * @summary Criar uma nova proposta de hor치rio
 */
export const propostasHorarioControllerCreate = (
  createPropostaHorarioDto: BodyType<CreatePropostaHorarioDto>,
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    {
      url: `/propostas-horario`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createPropostaHorarioDto,
      signal,
    },
    options,
  )
}

export const getPropostasHorarioControllerCreateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerCreate>>,
    TError,
    { data: BodyType<CreatePropostaHorarioDto> },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof propostasHorarioControllerCreate>>,
  TError,
  { data: BodyType<CreatePropostaHorarioDto> },
  TContext
> => {
  const mutationKey = ["propostasHorarioControllerCreate"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerCreate>>,
    { data: BodyType<CreatePropostaHorarioDto> }
  > = (props) => {
    const { data } = props ?? {}

    return propostasHorarioControllerCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PropostasHorarioControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerCreate>>
>
export type PropostasHorarioControllerCreateMutationBody =
  BodyType<CreatePropostaHorarioDto>
export type PropostasHorarioControllerCreateMutationError = ErrorType<unknown>

/**
 * @summary Criar uma nova proposta de hor치rio
 */
export const usePropostasHorarioControllerCreate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerCreate>>,
      TError,
      { data: BodyType<CreatePropostaHorarioDto> },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof propostasHorarioControllerCreate>>,
  TError,
  { data: BodyType<CreatePropostaHorarioDto> },
  TContext
> => {
  const mutationOptions =
    getPropostasHorarioControllerCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Listar todas as propostas de hor치rio
 */
export const propostasHorarioControllerFindAll = (
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto[]>(
    { url: `/propostas-horario`, method: "GET", signal },
    options,
  )
}

export const getPropostasHorarioControllerFindAllQueryKey = () => {
  return ["propostas-horario"] as const
}

export const getPropostasHorarioControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
  TError = ErrorType<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
      TError,
      TData
    >
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getPropostasHorarioControllerFindAllQueryKey()

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>
  > = ({ signal }) => propostasHorarioControllerFindAll(requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PropostasHorarioControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>
>
export type PropostasHorarioControllerFindAllQueryError = ErrorType<unknown>

export function usePropostasHorarioControllerFindAll<
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function usePropostasHorarioControllerFindAll<
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
          TError,
          Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePropostasHorarioControllerFindAll<
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Listar todas as propostas de hor치rio
 */

export function usePropostasHorarioControllerFindAll<
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
  TError = ErrorType<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindAll>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getPropostasHorarioControllerFindAllQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Buscar uma proposta de hor치rio pelo ID
 */
export const propostasHorarioControllerFindOne = (
  id: string,
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    { url: `/propostas-horario/${id}`, method: "GET", signal },
    options,
  )
}

export const getPropostasHorarioControllerFindOneQueryKey = (id: string) => {
  return ["propostas-horario", id] as const
}

export const getPropostasHorarioControllerFindOneQueryOptions = <
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ?? getPropostasHorarioControllerFindOneQueryKey(id)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>
  > = ({ signal }) =>
    propostasHorarioControllerFindOne(id, requestOptions, signal)

  return { queryKey, queryFn, enabled: !!id, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type PropostasHorarioControllerFindOneQueryResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>
>
export type PropostasHorarioControllerFindOneQueryError = ErrorType<unknown>

export function usePropostasHorarioControllerFindOne<
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function usePropostasHorarioControllerFindOne<
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
          TError,
          Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function usePropostasHorarioControllerFindOne<
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar uma proposta de hor치rio pelo ID
 */

export function usePropostasHorarioControllerFindOne<
  TData = Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
  TError = ErrorType<unknown>,
>(
  id: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof propostasHorarioControllerFindOne>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getPropostasHorarioControllerFindOneQueryOptions(
    id,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * @summary Atualizar uma proposta de hor치rio
 */
export const propostasHorarioControllerUpdate = (
  id: string,
  updatePropostaHorarioDto: BodyType<UpdatePropostaHorarioDto>,
  options?: SecondParameter<typeof orvalCustomInstance>,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    {
      url: `/propostas-horario/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updatePropostaHorarioDto,
    },
    options,
  )
}

export const getPropostasHorarioControllerUpdateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerUpdate>>,
    TError,
    { id: string; data: BodyType<UpdatePropostaHorarioDto> },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof propostasHorarioControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdatePropostaHorarioDto> },
  TContext
> => {
  const mutationKey = ["propostasHorarioControllerUpdate"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerUpdate>>,
    { id: string; data: BodyType<UpdatePropostaHorarioDto> }
  > = (props) => {
    const { id, data } = props ?? {}

    return propostasHorarioControllerUpdate(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PropostasHorarioControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerUpdate>>
>
export type PropostasHorarioControllerUpdateMutationBody =
  BodyType<UpdatePropostaHorarioDto>
export type PropostasHorarioControllerUpdateMutationError = ErrorType<unknown>

/**
 * @summary Atualizar uma proposta de hor치rio
 */
export const usePropostasHorarioControllerUpdate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerUpdate>>,
      TError,
      { id: string; data: BodyType<UpdatePropostaHorarioDto> },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof propostasHorarioControllerUpdate>>,
  TError,
  { id: string; data: BodyType<UpdatePropostaHorarioDto> },
  TContext
> => {
  const mutationOptions =
    getPropostasHorarioControllerUpdateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Remover uma proposta de hor치rio
 */
export const propostasHorarioControllerRemove = (
  id: string,
  options?: SecondParameter<typeof orvalCustomInstance>,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    { url: `/propostas-horario/${id}`, method: "DELETE" },
    options,
  )
}

export const getPropostasHorarioControllerRemoveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerRemove>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof propostasHorarioControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["propostasHorarioControllerRemove"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerRemove>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return propostasHorarioControllerRemove(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PropostasHorarioControllerRemoveMutationResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerRemove>>
>

export type PropostasHorarioControllerRemoveMutationError = ErrorType<unknown>

/**
 * @summary Remover uma proposta de hor치rio
 */
export const usePropostasHorarioControllerRemove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerRemove>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof propostasHorarioControllerRemove>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getPropostasHorarioControllerRemoveMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Submeter uma proposta de hor치rio para aprova칞칚o
 */
export const propostasHorarioControllerSubmit = (
  id: string,
  submitPropostaHorarioDto: BodyType<SubmitPropostaHorarioDto>,
  options?: SecondParameter<typeof orvalCustomInstance>,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    {
      url: `/propostas-horario/${id}/submit`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: submitPropostaHorarioDto,
    },
    options,
  )
}

export const getPropostasHorarioControllerSubmitMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerSubmit>>,
    TError,
    { id: string; data: BodyType<SubmitPropostaHorarioDto> },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof propostasHorarioControllerSubmit>>,
  TError,
  { id: string; data: BodyType<SubmitPropostaHorarioDto> },
  TContext
> => {
  const mutationKey = ["propostasHorarioControllerSubmit"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerSubmit>>,
    { id: string; data: BodyType<SubmitPropostaHorarioDto> }
  > = (props) => {
    const { id, data } = props ?? {}

    return propostasHorarioControllerSubmit(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PropostasHorarioControllerSubmitMutationResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerSubmit>>
>
export type PropostasHorarioControllerSubmitMutationBody =
  BodyType<SubmitPropostaHorarioDto>
export type PropostasHorarioControllerSubmitMutationError = ErrorType<unknown>

/**
 * @summary Submeter uma proposta de hor치rio para aprova칞칚o
 */
export const usePropostasHorarioControllerSubmit = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerSubmit>>,
      TError,
      { id: string; data: BodyType<SubmitPropostaHorarioDto> },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof propostasHorarioControllerSubmit>>,
  TError,
  { id: string; data: BodyType<SubmitPropostaHorarioDto> },
  TContext
> => {
  const mutationOptions =
    getPropostasHorarioControllerSubmitMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Aprovar uma proposta de hor치rio
 */
export const propostasHorarioControllerApprove = (
  id: string,
  approvePropostaDto: BodyType<ApprovePropostaDto>,
  options?: SecondParameter<typeof orvalCustomInstance>,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    {
      url: `/propostas-horario/${id}/approve`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: approvePropostaDto,
    },
    options,
  )
}

export const getPropostasHorarioControllerApproveMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerApprove>>,
    TError,
    { id: string; data: BodyType<ApprovePropostaDto> },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof propostasHorarioControllerApprove>>,
  TError,
  { id: string; data: BodyType<ApprovePropostaDto> },
  TContext
> => {
  const mutationKey = ["propostasHorarioControllerApprove"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerApprove>>,
    { id: string; data: BodyType<ApprovePropostaDto> }
  > = (props) => {
    const { id, data } = props ?? {}

    return propostasHorarioControllerApprove(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PropostasHorarioControllerApproveMutationResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerApprove>>
>
export type PropostasHorarioControllerApproveMutationBody =
  BodyType<ApprovePropostaDto>
export type PropostasHorarioControllerApproveMutationError = ErrorType<unknown>

/**
 * @summary Aprovar uma proposta de hor치rio
 */
export const usePropostasHorarioControllerApprove = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerApprove>>,
      TError,
      { id: string; data: BodyType<ApprovePropostaDto> },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof propostasHorarioControllerApprove>>,
  TError,
  { id: string; data: BodyType<ApprovePropostaDto> },
  TContext
> => {
  const mutationOptions =
    getPropostasHorarioControllerApproveMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Rejeitar uma proposta de hor치rio
 */
export const propostasHorarioControllerReject = (
  id: string,
  rejectPropostaDto: BodyType<RejectPropostaDto>,
  options?: SecondParameter<typeof orvalCustomInstance>,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    {
      url: `/propostas-horario/${id}/reject`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: rejectPropostaDto,
    },
    options,
  )
}

export const getPropostasHorarioControllerRejectMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerReject>>,
    TError,
    { id: string; data: BodyType<RejectPropostaDto> },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof propostasHorarioControllerReject>>,
  TError,
  { id: string; data: BodyType<RejectPropostaDto> },
  TContext
> => {
  const mutationKey = ["propostasHorarioControllerReject"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerReject>>,
    { id: string; data: BodyType<RejectPropostaDto> }
  > = (props) => {
    const { id, data } = props ?? {}

    return propostasHorarioControllerReject(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PropostasHorarioControllerRejectMutationResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerReject>>
>
export type PropostasHorarioControllerRejectMutationBody =
  BodyType<RejectPropostaDto>
export type PropostasHorarioControllerRejectMutationError = ErrorType<unknown>

/**
 * @summary Rejeitar uma proposta de hor치rio
 */
export const usePropostasHorarioControllerReject = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerReject>>,
      TError,
      { id: string; data: BodyType<RejectPropostaDto> },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof propostasHorarioControllerReject>>,
  TError,
  { id: string; data: BodyType<RejectPropostaDto> },
  TContext
> => {
  const mutationOptions =
    getPropostasHorarioControllerRejectMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Reabrir uma proposta rejeitada para edi칞칚o
 */
export const propostasHorarioControllerReopen = (
  id: string,
  options?: SecondParameter<typeof orvalCustomInstance>,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    { url: `/propostas-horario/${id}/reopen`, method: "PATCH" },
    options,
  )
}

export const getPropostasHorarioControllerReopenMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerReopen>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof propostasHorarioControllerReopen>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["propostasHorarioControllerReopen"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerReopen>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return propostasHorarioControllerReopen(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PropostasHorarioControllerReopenMutationResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerReopen>>
>

export type PropostasHorarioControllerReopenMutationError = ErrorType<unknown>

/**
 * @summary Reabrir uma proposta rejeitada para edi칞칚o
 */
export const usePropostasHorarioControllerReopen = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerReopen>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof propostasHorarioControllerReopen>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getPropostasHorarioControllerReopenMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * @summary Devolver uma proposta aprovada para edi칞칚o
 */
export const propostasHorarioControllerSendBack = (
  id: string,
  sendBackPropostaDto: BodyType<SendBackPropostaDto>,
  options?: SecondParameter<typeof orvalCustomInstance>,
) => {
  return orvalCustomInstance<PropostaHorarioResponseDto>(
    {
      url: `/propostas-horario/${id}/send-back`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: sendBackPropostaDto,
    },
    options,
  )
}

export const getPropostasHorarioControllerSendBackMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof propostasHorarioControllerSendBack>>,
    TError,
    { id: string; data: BodyType<SendBackPropostaDto> },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof propostasHorarioControllerSendBack>>,
  TError,
  { id: string; data: BodyType<SendBackPropostaDto> },
  TContext
> => {
  const mutationKey = ["propostasHorarioControllerSendBack"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof propostasHorarioControllerSendBack>>,
    { id: string; data: BodyType<SendBackPropostaDto> }
  > = (props) => {
    const { id, data } = props ?? {}

    return propostasHorarioControllerSendBack(id, data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type PropostasHorarioControllerSendBackMutationResult = NonNullable<
  Awaited<ReturnType<typeof propostasHorarioControllerSendBack>>
>
export type PropostasHorarioControllerSendBackMutationBody =
  BodyType<SendBackPropostaDto>
export type PropostasHorarioControllerSendBackMutationError = ErrorType<unknown>

/**
 * @summary Devolver uma proposta aprovada para edi칞칚o
 */
export const usePropostasHorarioControllerSendBack = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof propostasHorarioControllerSendBack>>,
      TError,
      { id: string; data: BodyType<SendBackPropostaDto> },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof propostasHorarioControllerSendBack>>,
  TError,
  { id: string; data: BodyType<SendBackPropostaDto> },
  TContext
> => {
  const mutationOptions =
    getPropostasHorarioControllerSendBackMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
