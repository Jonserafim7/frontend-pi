/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  ConfiguracaoHorarioDto,
  UpsertConfiguracaoHorarioDto
} from '../../model';

import { orvalCustomInstance } from '../../../lib/orval-axios-instance';
import type { ErrorType , BodyType } from '../../../lib/orval-axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Obt√©m a configura√ß√£o de hor√°rio global
 */
export const configuracoesHorarioControllerGet = (
    
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<ConfiguracaoHorarioDto>(
      {url: `/configuracoes-horario`, method: 'GET', signal
    },
      options);
    }
  

export const getConfiguracoesHorarioControllerGetQueryKey = () => {
    return ['configuracoes-horario'] as const;
    }

    
export const getConfiguracoesHorarioControllerGetQueryOptions = <TData = Awaited<ReturnType<typeof configuracoesHorarioControllerGet>>, TError = ErrorType<unknown>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof configuracoesHorarioControllerGet>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getConfiguracoesHorarioControllerGetQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof configuracoesHorarioControllerGet>>> = ({ signal }) => configuracoesHorarioControllerGet(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof configuracoesHorarioControllerGet>>, TError, TData> & { queryKey: QueryKey }
}

export type ConfiguracoesHorarioControllerGetQueryResult = NonNullable<Awaited<ReturnType<typeof configuracoesHorarioControllerGet>>>
export type ConfiguracoesHorarioControllerGetQueryError = ErrorType<unknown>


/**
 * @summary Obt√©m a configura√ß√£o de hor√°rio global
 */

export function useConfiguracoesHorarioControllerGet<TData = Awaited<ReturnType<typeof configuracoesHorarioControllerGet>>, TError = ErrorType<unknown>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof configuracoesHorarioControllerGet>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getConfiguracoesHorarioControllerGetQueryOptions(options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Cria ou atualiza a configura√ß√£o de hor√°rio global
 */
export const configuracoesHorarioControllerUpsert = (
    upsertConfiguracaoHorarioDto: BodyType<UpsertConfiguracaoHorarioDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<ConfiguracaoHorarioDto>(
      {url: `/configuracoes-horario`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: upsertConfiguracaoHorarioDto
    },
      options);
    }
  


export const getConfiguracoesHorarioControllerUpsertMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof configuracoesHorarioControllerUpsert>>, TError,{data: BodyType<UpsertConfiguracaoHorarioDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof configuracoesHorarioControllerUpsert>>, TError,{data: BodyType<UpsertConfiguracaoHorarioDto>}, TContext> => {

const mutationKey = ['configuracoesHorarioControllerUpsert'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof configuracoesHorarioControllerUpsert>>, {data: BodyType<UpsertConfiguracaoHorarioDto>}> = (props) => {
          const {data} = props ?? {};

          return  configuracoesHorarioControllerUpsert(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type ConfiguracoesHorarioControllerUpsertMutationResult = NonNullable<Awaited<ReturnType<typeof configuracoesHorarioControllerUpsert>>>
    export type ConfiguracoesHorarioControllerUpsertMutationBody = BodyType<UpsertConfiguracaoHorarioDto>
    export type ConfiguracoesHorarioControllerUpsertMutationError = ErrorType<unknown>

    /**
 * @summary Cria ou atualiza a configura√ß√£o de hor√°rio global
 */
export const useConfiguracoesHorarioControllerUpsert = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof configuracoesHorarioControllerUpsert>>, TError,{data: BodyType<UpsertConfiguracaoHorarioDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof configuracoesHorarioControllerUpsert>>,
        TError,
        {data: BodyType<UpsertConfiguracaoHorarioDto>},
        TContext
      > => {

      const mutationOptions = getConfiguracoesHorarioControllerUpsertMutationOptions(options);

      return useMutation(mutationOptions );
    }
    