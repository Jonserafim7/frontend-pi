/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query"
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query"

import type {
  AlocacaoHorarioResponseDto,
  AlocacoesHorariosControllerFindManyParams,
  CreateAlocacaoHorarioDto,
  ValidateAlocacaoDto,
  ValidateAlocacaoResponseDto,
} from "../../model"

import { orvalCustomInstance } from "../../../lib/orval-axios-instance"
import type { ErrorType, BodyType } from "../../../lib/orval-axios-instance"

type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1]

/**
 * Cria uma nova aloca√ß√£o de hor√°rio ap√≥s validar disponibilidade e conflitos
 * @summary Criar nova aloca√ß√£o de hor√°rio
 */
export const alocacoesHorariosControllerCreate = (
  createAlocacaoHorarioDto: BodyType<CreateAlocacaoHorarioDto>,
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<AlocacaoHorarioResponseDto>(
    {
      url: `/alocacoes-horarios`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createAlocacaoHorarioDto,
      signal,
    },
    options,
  )
}

export const getAlocacoesHorariosControllerCreateMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof alocacoesHorariosControllerCreate>>,
    TError,
    { data: BodyType<CreateAlocacaoHorarioDto> },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof alocacoesHorariosControllerCreate>>,
  TError,
  { data: BodyType<CreateAlocacaoHorarioDto> },
  TContext
> => {
  const mutationKey = ["alocacoesHorariosControllerCreate"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof alocacoesHorariosControllerCreate>>,
    { data: BodyType<CreateAlocacaoHorarioDto> }
  > = (props) => {
    const { data } = props ?? {}

    return alocacoesHorariosControllerCreate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AlocacoesHorariosControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof alocacoesHorariosControllerCreate>>
>
export type AlocacoesHorariosControllerCreateMutationBody =
  BodyType<CreateAlocacaoHorarioDto>
export type AlocacoesHorariosControllerCreateMutationError = ErrorType<void>

/**
 * @summary Criar nova aloca√ß√£o de hor√°rio
 */
export const useAlocacoesHorariosControllerCreate = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof alocacoesHorariosControllerCreate>>,
      TError,
      { data: BodyType<CreateAlocacaoHorarioDto> },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof alocacoesHorariosControllerCreate>>,
  TError,
  { data: BodyType<CreateAlocacaoHorarioDto> },
  TContext
> => {
  const mutationOptions =
    getAlocacoesHorariosControllerCreateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Busca aloca√ß√µes aplicando filtros opcionais
 * @summary Buscar aloca√ß√µes com filtros
 */
export const alocacoesHorariosControllerFindMany = (
  params?: AlocacoesHorariosControllerFindManyParams,
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<AlocacaoHorarioResponseDto[]>(
    { url: `/alocacoes-horarios`, method: "GET", params, signal },
    options,
  )
}

export const getAlocacoesHorariosControllerFindManyQueryKey = (
  params?: AlocacoesHorariosControllerFindManyParams,
) => {
  return ["alocacoes-horarios", ...(params ? [params] : [])] as const
}

export const getAlocacoesHorariosControllerFindManyQueryOptions = <
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
  TError = ErrorType<unknown>,
>(
  params?: AlocacoesHorariosControllerFindManyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAlocacoesHorariosControllerFindManyQueryKey(params)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>
  > = ({ signal }) =>
    alocacoesHorariosControllerFindMany(params, requestOptions, signal)

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AlocacoesHorariosControllerFindManyQueryResult = NonNullable<
  Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>
>
export type AlocacoesHorariosControllerFindManyQueryError = ErrorType<unknown>

export function useAlocacoesHorariosControllerFindMany<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
  TError = ErrorType<unknown>,
>(
  params: undefined | AlocacoesHorariosControllerFindManyParams,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
          TError,
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAlocacoesHorariosControllerFindMany<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
  TError = ErrorType<unknown>,
>(
  params?: AlocacoesHorariosControllerFindManyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
          TError,
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAlocacoesHorariosControllerFindMany<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
  TError = ErrorType<unknown>,
>(
  params?: AlocacoesHorariosControllerFindManyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar aloca√ß√µes com filtros
 */

export function useAlocacoesHorariosControllerFindMany<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
  TError = ErrorType<unknown>,
>(
  params?: AlocacoesHorariosControllerFindManyParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindMany>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAlocacoesHorariosControllerFindManyQueryOptions(
    params,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Valida se uma aloca√ß√£o pode ser criada sem conflitos
 * @summary Validar aloca√ß√£o antes de criar
 */
export const alocacoesHorariosControllerValidate = (
  validateAlocacaoDto: BodyType<ValidateAlocacaoDto>,
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<ValidateAlocacaoResponseDto>(
    {
      url: `/alocacoes-horarios/validate`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: validateAlocacaoDto,
      signal,
    },
    options,
  )
}

export const getAlocacoesHorariosControllerValidateMutationOptions = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof alocacoesHorariosControllerValidate>>,
    TError,
    { data: BodyType<ValidateAlocacaoDto> },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof alocacoesHorariosControllerValidate>>,
  TError,
  { data: BodyType<ValidateAlocacaoDto> },
  TContext
> => {
  const mutationKey = ["alocacoesHorariosControllerValidate"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof alocacoesHorariosControllerValidate>>,
    { data: BodyType<ValidateAlocacaoDto> }
  > = (props) => {
    const { data } = props ?? {}

    return alocacoesHorariosControllerValidate(data, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AlocacoesHorariosControllerValidateMutationResult = NonNullable<
  Awaited<ReturnType<typeof alocacoesHorariosControllerValidate>>
>
export type AlocacoesHorariosControllerValidateMutationBody =
  BodyType<ValidateAlocacaoDto>
export type AlocacoesHorariosControllerValidateMutationError = ErrorType<unknown>

/**
 * @summary Validar aloca√ß√£o antes de criar
 */
export const useAlocacoesHorariosControllerValidate = <
  TError = ErrorType<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof alocacoesHorariosControllerValidate>>,
      TError,
      { data: BodyType<ValidateAlocacaoDto> },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof alocacoesHorariosControllerValidate>>,
  TError,
  { data: BodyType<ValidateAlocacaoDto> },
  TContext
> => {
  const mutationOptions =
    getAlocacoesHorariosControllerValidateMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
/**
 * Busca todas as aloca√ß√µes de uma turma espec√≠fica
 * @summary Buscar aloca√ß√µes por turma
 */
export const alocacoesHorariosControllerFindByTurma = (
  idTurma: string,
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<AlocacaoHorarioResponseDto[]>(
    { url: `/alocacoes-horarios/turma/${idTurma}`, method: "GET", signal },
    options,
  )
}

export const getAlocacoesHorariosControllerFindByTurmaQueryKey = (
  idTurma: string,
) => {
  return ["alocacoes-horarios", "turma", idTurma] as const
}

export const getAlocacoesHorariosControllerFindByTurmaQueryOptions = <
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
  TError = ErrorType<unknown>,
>(
  idTurma: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAlocacoesHorariosControllerFindByTurmaQueryKey(idTurma)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>
  > = ({ signal }) =>
    alocacoesHorariosControllerFindByTurma(idTurma, requestOptions, signal)

  return {
    queryKey,
    queryFn,
    enabled: !!idTurma,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AlocacoesHorariosControllerFindByTurmaQueryResult = NonNullable<
  Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>
>
export type AlocacoesHorariosControllerFindByTurmaQueryError = ErrorType<unknown>

export function useAlocacoesHorariosControllerFindByTurma<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
  TError = ErrorType<unknown>,
>(
  idTurma: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
          TError,
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAlocacoesHorariosControllerFindByTurma<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
  TError = ErrorType<unknown>,
>(
  idTurma: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
          TError,
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAlocacoesHorariosControllerFindByTurma<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
  TError = ErrorType<unknown>,
>(
  idTurma: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar aloca√ß√µes por turma
 */

export function useAlocacoesHorariosControllerFindByTurma<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
  TError = ErrorType<unknown>,
>(
  idTurma: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByTurma>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAlocacoesHorariosControllerFindByTurmaQueryOptions(
    idTurma,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Busca todas as aloca√ß√µes de um professor espec√≠fico
 * @summary Buscar aloca√ß√µes por professor
 */
export const alocacoesHorariosControllerFindByProfessor = (
  idProfessor: string,
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<AlocacaoHorarioResponseDto[]>(
    {
      url: `/alocacoes-horarios/professor/${idProfessor}`,
      method: "GET",
      signal,
    },
    options,
  )
}

export const getAlocacoesHorariosControllerFindByProfessorQueryKey = (
  idProfessor: string,
) => {
  return ["alocacoes-horarios", "professor", idProfessor] as const
}

export const getAlocacoesHorariosControllerFindByProfessorQueryOptions = <
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
  TError = ErrorType<unknown>,
>(
  idProfessor: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAlocacoesHorariosControllerFindByProfessorQueryKey(idProfessor)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>
  > = ({ signal }) =>
    alocacoesHorariosControllerFindByProfessor(
      idProfessor,
      requestOptions,
      signal,
    )

  return {
    queryKey,
    queryFn,
    enabled: !!idProfessor,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AlocacoesHorariosControllerFindByProfessorQueryResult = NonNullable<
  Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>
>
export type AlocacoesHorariosControllerFindByProfessorQueryError =
  ErrorType<unknown>

export function useAlocacoesHorariosControllerFindByProfessor<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
  TError = ErrorType<unknown>,
>(
  idProfessor: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
          TError,
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAlocacoesHorariosControllerFindByProfessor<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
  TError = ErrorType<unknown>,
>(
  idProfessor: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
          TError,
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAlocacoesHorariosControllerFindByProfessor<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
  TError = ErrorType<unknown>,
>(
  idProfessor: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar aloca√ß√µes por professor
 */

export function useAlocacoesHorariosControllerFindByProfessor<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
  TError = ErrorType<unknown>,
>(
  idProfessor: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProfessor>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAlocacoesHorariosControllerFindByProfessorQueryOptions(
    idProfessor,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Busca todas as aloca√ß√µes de uma proposta de hor√°rio espec√≠fica
 * @summary Buscar aloca√ß√µes por proposta
 */
export const alocacoesHorariosControllerFindByProposta = (
  idPropostaHorario: string,
  options?: SecondParameter<typeof orvalCustomInstance>,
  signal?: AbortSignal,
) => {
  return orvalCustomInstance<AlocacaoHorarioResponseDto[]>(
    {
      url: `/alocacoes-horarios/proposta/${idPropostaHorario}`,
      method: "GET",
      signal,
    },
    options,
  )
}

export const getAlocacoesHorariosControllerFindByPropostaQueryKey = (
  idPropostaHorario: string,
) => {
  return ["alocacoes-horarios", "proposta", idPropostaHorario] as const
}

export const getAlocacoesHorariosControllerFindByPropostaQueryOptions = <
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
  TError = ErrorType<unknown>,
>(
  idPropostaHorario: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {}

  const queryKey =
    queryOptions?.queryKey ??
    getAlocacoesHorariosControllerFindByPropostaQueryKey(idPropostaHorario)

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>
  > = ({ signal }) =>
    alocacoesHorariosControllerFindByProposta(
      idPropostaHorario,
      requestOptions,
      signal,
    )

  return {
    queryKey,
    queryFn,
    enabled: !!idPropostaHorario,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type AlocacoesHorariosControllerFindByPropostaQueryResult = NonNullable<
  Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>
>
export type AlocacoesHorariosControllerFindByPropostaQueryError =
  ErrorType<unknown>

export function useAlocacoesHorariosControllerFindByProposta<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
  TError = ErrorType<unknown>,
>(
  idPropostaHorario: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
          TError,
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
}
export function useAlocacoesHorariosControllerFindByProposta<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
  TError = ErrorType<unknown>,
>(
  idPropostaHorario: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
          TError,
          Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>
        >,
        "initialData"
      >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useAlocacoesHorariosControllerFindByProposta<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
  TError = ErrorType<unknown>,
>(
  idPropostaHorario: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
/**
 * @summary Buscar aloca√ß√µes por proposta
 */

export function useAlocacoesHorariosControllerFindByProposta<
  TData = Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
  TError = ErrorType<unknown>,
>(
  idPropostaHorario: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof alocacoesHorariosControllerFindByProposta>>,
        TError,
        TData
      >
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>
} {
  const queryOptions = getAlocacoesHorariosControllerFindByPropostaQueryOptions(
    idPropostaHorario,
    options,
  )

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> }

  query.queryKey = queryOptions.queryKey

  return query
}

/**
 * Remove uma aloca√ß√£o de hor√°rio existente
 * @summary Remover aloca√ß√£o
 */
export const alocacoesHorariosControllerDelete = (
  id: string,
  options?: SecondParameter<typeof orvalCustomInstance>,
) => {
  return orvalCustomInstance<void>(
    { url: `/alocacoes-horarios/${id}`, method: "DELETE" },
    options,
  )
}

export const getAlocacoesHorariosControllerDeleteMutationOptions = <
  TError = ErrorType<void>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof alocacoesHorariosControllerDelete>>,
    TError,
    { id: string },
    TContext
  >
  request?: SecondParameter<typeof orvalCustomInstance>
}): UseMutationOptions<
  Awaited<ReturnType<typeof alocacoesHorariosControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["alocacoesHorariosControllerDelete"]
  const { mutation: mutationOptions, request: requestOptions } =
    options ?
      (
        options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
      ) ?
        options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined }

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof alocacoesHorariosControllerDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {}

    return alocacoesHorariosControllerDelete(id, requestOptions)
  }

  return { mutationFn, ...mutationOptions }
}

export type AlocacoesHorariosControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof alocacoesHorariosControllerDelete>>
>

export type AlocacoesHorariosControllerDeleteMutationError = ErrorType<void>

/**
 * @summary Remover aloca√ß√£o
 */
export const useAlocacoesHorariosControllerDelete = <
  TError = ErrorType<void>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof alocacoesHorariosControllerDelete>>,
      TError,
      { id: string },
      TContext
    >
    request?: SecondParameter<typeof orvalCustomInstance>
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof alocacoesHorariosControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions =
    getAlocacoesHorariosControllerDeleteMutationOptions(options)

  return useMutation(mutationOptions, queryClient)
}
