/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  useQuery
} from '@tanstack/react-query';
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  TurmaResponseDto
} from '../../model';

import { orvalCustomInstance } from '../../../lib/orval-axios-instance';
import type { ErrorType } from '../../../lib/orval-axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Obter detalhes de uma turma espec√≠fica
 */
export const turmasControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<TurmaResponseDto>(
      {url: `/turmas/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getTurmasControllerFindOneQueryKey = (id: string,) => {
    return ['turmas',id] as const;
    }

    
export const getTurmasControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof turmasControllerFindOne>>, TError = ErrorType<void>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof turmasControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getTurmasControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof turmasControllerFindOne>>> = ({ signal }) => turmasControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof turmasControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type TurmasControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof turmasControllerFindOne>>>
export type TurmasControllerFindOneQueryError = ErrorType<void>


/**
 * @summary Obter detalhes de uma turma espec√≠fica
 */

export function useTurmasControllerFindOne<TData = Awaited<ReturnType<typeof turmasControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof turmasControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getTurmasControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



