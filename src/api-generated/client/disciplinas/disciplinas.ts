/**
 * Generated by orval v7.9.0 üç∫
 * Do not edit manually.
 * API Hor√°rios Acad√™micos
 * Documenta√ß√£o da API para o Sistema de Elabora√ß√£o de Hor√°rio e Atribui√ß√£o de Disciplinas
 * OpenAPI spec version: 1.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateDisciplinaDto,
  DisciplinaResponseDto,
  DisciplinasControllerFindAllParams,
  UpdateDisciplinaDto
} from '../../model';

import { orvalCustomInstance } from '../../../lib/orval-axios-instance';
import type { ErrorType , BodyType } from '../../../lib/orval-axios-instance';


type SecondParameter<T extends (...args: never) => unknown> = Parameters<T>[1];



/**
 * @summary Criar uma nova disciplina
 */
export const disciplinasControllerCreate = (
    createDisciplinaDto: BodyType<CreateDisciplinaDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<DisciplinaResponseDto>(
      {url: `/disciplinas`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createDisciplinaDto, signal
    },
      options);
    }
  


export const getDisciplinasControllerCreateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerCreate>>, TError,{data: BodyType<CreateDisciplinaDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerCreate>>, TError,{data: BodyType<CreateDisciplinaDto>}, TContext> => {

const mutationKey = ['disciplinasControllerCreate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disciplinasControllerCreate>>, {data: BodyType<CreateDisciplinaDto>}> = (props) => {
          const {data} = props ?? {};

          return  disciplinasControllerCreate(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DisciplinasControllerCreateMutationResult = NonNullable<Awaited<ReturnType<typeof disciplinasControllerCreate>>>
    export type DisciplinasControllerCreateMutationBody = BodyType<CreateDisciplinaDto>
    export type DisciplinasControllerCreateMutationError = ErrorType<void>

    /**
 * @summary Criar uma nova disciplina
 */
export const useDisciplinasControllerCreate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerCreate>>, TError,{data: BodyType<CreateDisciplinaDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof disciplinasControllerCreate>>,
        TError,
        {data: BodyType<CreateDisciplinaDto>},
        TContext
      > => {

      const mutationOptions = getDisciplinasControllerCreateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Listar todas as disciplinas
 */
export const disciplinasControllerFindAll = (
    params?: DisciplinasControllerFindAllParams,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<DisciplinaResponseDto[]>(
      {url: `/disciplinas`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getDisciplinasControllerFindAllQueryKey = (params?: DisciplinasControllerFindAllParams,) => {
    return ['disciplinas', ...(params ? [params]: [])] as const;
    }

    
export const getDisciplinasControllerFindAllQueryOptions = <TData = Awaited<ReturnType<typeof disciplinasControllerFindAll>>, TError = ErrorType<void>>(params?: DisciplinasControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof disciplinasControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDisciplinasControllerFindAllQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof disciplinasControllerFindAll>>> = ({ signal }) => disciplinasControllerFindAll(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof disciplinasControllerFindAll>>, TError, TData> & { queryKey: QueryKey }
}

export type DisciplinasControllerFindAllQueryResult = NonNullable<Awaited<ReturnType<typeof disciplinasControllerFindAll>>>
export type DisciplinasControllerFindAllQueryError = ErrorType<void>


/**
 * @summary Listar todas as disciplinas
 */

export function useDisciplinasControllerFindAll<TData = Awaited<ReturnType<typeof disciplinasControllerFindAll>>, TError = ErrorType<void>>(
 params?: DisciplinasControllerFindAllParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof disciplinasControllerFindAll>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getDisciplinasControllerFindAllQueryOptions(params,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Buscar disciplina por ID
 */
export const disciplinasControllerFindOne = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,signal?: AbortSignal
) => {
      
      
      return orvalCustomInstance<DisciplinaResponseDto>(
      {url: `/disciplinas/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getDisciplinasControllerFindOneQueryKey = (id: string,) => {
    return ['disciplinas',id] as const;
    }

    
export const getDisciplinasControllerFindOneQueryOptions = <TData = Awaited<ReturnType<typeof disciplinasControllerFindOne>>, TError = ErrorType<void>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof disciplinasControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getDisciplinasControllerFindOneQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof disciplinasControllerFindOne>>> = ({ signal }) => disciplinasControllerFindOne(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof disciplinasControllerFindOne>>, TError, TData> & { queryKey: QueryKey }
}

export type DisciplinasControllerFindOneQueryResult = NonNullable<Awaited<ReturnType<typeof disciplinasControllerFindOne>>>
export type DisciplinasControllerFindOneQueryError = ErrorType<void>


/**
 * @summary Buscar disciplina por ID
 */

export function useDisciplinasControllerFindOne<TData = Awaited<ReturnType<typeof disciplinasControllerFindOne>>, TError = ErrorType<void>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof disciplinasControllerFindOne>>, TError, TData>, request?: SecondParameter<typeof orvalCustomInstance>}
  
 ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getDisciplinasControllerFindOneQueryOptions(id,options)

  const query = useQuery(queryOptions ) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Atualizar disciplina por ID
 */
export const disciplinasControllerUpdate = (
    id: string,
    updateDisciplinaDto: BodyType<UpdateDisciplinaDto>,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<DisciplinaResponseDto>(
      {url: `/disciplinas/${id}`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: updateDisciplinaDto
    },
      options);
    }
  


export const getDisciplinasControllerUpdateMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerUpdate>>, TError,{id: string;data: BodyType<UpdateDisciplinaDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerUpdate>>, TError,{id: string;data: BodyType<UpdateDisciplinaDto>}, TContext> => {

const mutationKey = ['disciplinasControllerUpdate'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disciplinasControllerUpdate>>, {id: string;data: BodyType<UpdateDisciplinaDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  disciplinasControllerUpdate(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DisciplinasControllerUpdateMutationResult = NonNullable<Awaited<ReturnType<typeof disciplinasControllerUpdate>>>
    export type DisciplinasControllerUpdateMutationBody = BodyType<UpdateDisciplinaDto>
    export type DisciplinasControllerUpdateMutationError = ErrorType<void>

    /**
 * @summary Atualizar disciplina por ID
 */
export const useDisciplinasControllerUpdate = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerUpdate>>, TError,{id: string;data: BodyType<UpdateDisciplinaDto>}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof disciplinasControllerUpdate>>,
        TError,
        {id: string;data: BodyType<UpdateDisciplinaDto>},
        TContext
      > => {

      const mutationOptions = getDisciplinasControllerUpdateMutationOptions(options);

      return useMutation(mutationOptions );
    }
    /**
 * @summary Remover disciplina por ID
 */
export const disciplinasControllerRemove = (
    id: string,
 options?: SecondParameter<typeof orvalCustomInstance>,) => {
      
      
      return orvalCustomInstance<void>(
      {url: `/disciplinas/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDisciplinasControllerRemoveMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerRemove>>, TError,{id: string}, TContext> => {

const mutationKey = ['disciplinasControllerRemove'];
const {mutation: mutationOptions, request: requestOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }, request: undefined};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof disciplinasControllerRemove>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  disciplinasControllerRemove(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DisciplinasControllerRemoveMutationResult = NonNullable<Awaited<ReturnType<typeof disciplinasControllerRemove>>>
    
    export type DisciplinasControllerRemoveMutationError = ErrorType<void>

    /**
 * @summary Remover disciplina por ID
 */
export const useDisciplinasControllerRemove = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof disciplinasControllerRemove>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof orvalCustomInstance>}
 ): UseMutationResult<
        Awaited<ReturnType<typeof disciplinasControllerRemove>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDisciplinasControllerRemoveMutationOptions(options);

      return useMutation(mutationOptions );
    }
    